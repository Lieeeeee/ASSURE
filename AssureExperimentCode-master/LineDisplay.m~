classdef LineDisplay
    %LINEDISPLAY Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
    end
    
    methods (Static)
        
        function im = getCroppedFrameFromFigure
            im=getframe;
            im=im.cdata;
            removedGrayMask = im(:,:,1)~=240 & im(:,:,2)~=240 & im(:,:,3)~=240;
            removedGrayMask = imclose(removedGrayMask,strel('disk',5'));
            [~,X]=find(removedGrayMask);
            [~,leftInd] = min(X);
            [~,rightInd] = max(X);
            
            im = im(:,X(leftInd):X(rightInd),:);
        end
        
        function lineStrctCell = calcLineStrctCellVariability(im,seg,prior,varMask)
            [~,overlay] = Utils.displayCertaintyUncertainty2_3D(im,prior,Utils.getBoundries(seg,false));
            lineStrctCell = LineStruct.getLineStructCell(overlay);
            %lineStrctCell = LineStruct.getLineStructCell(varMask,[0,0,1],lineStrctCell);
        end
        
        function displayMasks(im,masks)
            %lineStrctCell = LineDisplay.calcLineStrctCellVariability(im,seg,prior,varMask);
            LineDisplay.ui(im,[],masks);
        end
        
        function displayVariabilityWithoutSeg(im, varMask)
            LineDisplay.displayMasks(im, varMask);
        end
        
        function displayVariabilityGradientMask(im, varMask)
            % takes in a variability mask containing varying levels of
            % certainty (
        end
        
        function displayVariability(im,seg,prior,varMask)
            %lineStrctCell = LineDisplay.calcLineStrctCellVariability(im,seg,prior,varMask);
            [~,overlay] = Utils.displayCertaintyUncertainty2_3D(im,prior,Utils.getBoundries(seg,false));
            lineStrctCell = LineStruct.getLineStructCell(overlay);
            LineDisplay.ui(im,lineStrctCell,varMask);
        end
        
        function displayVariabilityFromMask(im, seg, varMask, showMask, rThresh)
            % displays the colored segmentation and the given uncertainty mask 
            %   (if showMask is set to false, only displays the colored setmentation)
            if ~exist('rThresh', 'var')
                rThresh = 4;
            end
            lineStrctCell = LineStruct.getLineStructCellFromVarMask(im, seg, varMask, rThresh);
            
            if(~exist('showMask', 'var') || showMask)
                LineDisplay.ui(im,lineStrctCell,varMask);
            else
                LineDisplay.ui(im,lineStrctCell);
            end
        end
        
        function lineStrctCell = calcQualityLineStrctCell(seg,prior)
            [~,overlay] = Utils.displayCertaintyUncertainty2_3D(seg,prior,Utils.getBoundries(seg,false));
            lineStrctCell = LineStruct.getLineStructCell(overlay);
        end
        
        function displayQuality(im,seg,prior)
            lineStrctCell = LineDisplay.calcQualityLineStrctCell(seg,prior);
            LineDisplay.ui(im,lineStrctCell);
        end
        
        function displayOuterSegsOverlay(im,segs)
            [union,intersection] = Utils.calcUnionIntersection(segs);
            overlay = zeros(size(segs{1}));
            for z=1:length(segs)
                overlay(segs{z}&(overlay==0))=z;
            end
            
            colors = {[0,0,1],[0,0.5,1],[0,1,1],[0.25,1,0.25],[0.5,1,0],[1,0.5,0],[1,1,0]};
            overlayRGB = zeros(size(im,1),size(im,2),3);
            for z=1:length(segs)
                %changeMask =
            end
            
        end
        
        function [lineStrctCell, colors] = displaySegsOverlay(im,segs,mask, displayOuterSegOnly,colors)
            if ~iscell(segs)
                temp = segs;
                segs = {temp};
            end
            
            
            if ~exist('colors','var')
                colors = Utils.getRegularRGBColors();
                %[0,0,1 ; 1,0,(222/255) ; 0,1,1 ; 0.25,1,0.25 ; 174/255,94/255,13/255 ; 1,0.5,0 ; 1,1,0 ; 0,0,0, ;131/255,174/255,13/255; ...
                %    1,225/255,1 ; 160/255,128/255,192/255 ; 64/255,0.5,0.5 ; 0.5,0,0 ; 1,0.5,0.5 ; 192/255, 192/255, 192/255 ];
                if exist('mask','var')  && ~isempty(mask)
                    colors(1,:) =  [];
                end
            end
            
            if length(colors)<length(segs)
                error 'too many segs, not enough colors. function should be fixed';
            end

            if exist('mask', 'var') && ~isempty(mask) && length(segs) == 1
                lineStrctCell = LineStruct.getLineStructCellFromVarMask(im, segs{1}, mask);
            else
                lineStrctCell = LineStruct.getLineStructCell(segs{1},colors(1,:));
                for t=2:length(segs)
                    lineStrctCell = LineStruct.getLineStructCell(segs{t},colors(t,:),lineStrctCell);
                end
            end
            
            if exist('displayOuterSegOnly') && displayOuterSegOnly
                union = Utils.calcUnionIntersection(segs);
                P1 = lineStrctCell{1}.P1;
                P2 = lineStrctCell{1}.P2;
                unionLines = LineStruct.getLineStructCell(union,[1,1,1]);
                colorsHist = zeros(length(segs),1);
                for t=1:length(unionLines{1}.P1)
                    p1 = unionLines{1}.P1(t,:);
                    [~,indx1]=ismember(P1,p1,'rows');
                    p2 = unionLines{1}.P2(t,:);
                    [~,indx2]=ismember(P2,p2,'rows');
                    
                    foundLine = find(indx1~=0 & indx2~=0,1,'first');
                    if ~isempty(foundLine)
                        c = lineStrctCell{1}.colors(foundLine,:);
                        unionLines{1}.colors(t,:)=c;
                    else
                        continue;
                    end
                    
                    [~,indx1]=ismember(colors,c,'rows');
                    colorsHist(logical(indx1)) = colorsHist(logical(indx1))+1;
                    
                end
                
                bar(colorsHist/sum(colorsHist(:)));
                xlabel('annotator number');
                ylabel('percentage');
                title('representation of each annotator along border of POSSIBLE mask(in percents)');
                LineDisplay.ui(im,unionLines);
            elseif exist('mask','var') && ~isempty(mask)
                LineDisplay.ui(im,lineStrctCell,mask);
            else
                LineDisplay.ui(im,lineStrctCell);
            end
            
        end
        
        function saveLineStrctCellAsTiff(im, lineStrctCell, tiffName, saveAsVid, mask)
            if exist(tiffName,'file')
                delete(tiffName);
            end
            if ~exist('saveAsVid','var')
                saveAsVid = false;
            end
            
            firstSlice = find(~cellfun(@isempty,lineStrctCell),1,'first');
            nSlices = find(~cellfun(@isempty,lineStrctCell),1,'last') - firstSlice + 1;
            f = figure('units','normalized','outerposition',[0 0 1 1]);
            
            ax = axes('Units','pixels');
            set(ax, 'units', 'normalized', 'position', [0.05 0.15 0.9 0.8])
            for z = 1:nSlices
                [z, nSlices]
                
                if exist('mask','var') && ~isempty(mask)
                    LineDisplay.showZSliceData(im, {},z + firstSlice - 1,[min(im(:)),max(im(:))],mask);
                else
                    LineDisplay.showZSliceData(im, lineStrctCell,z + firstSlice - 1,[min(im(:)),max(im(:))],false(size(im)));
                end
                
                currentRes = LineDisplay.getCroppedFrameFromFigure();
                %currentRes = getframe; currentRes = currentRes.cdata;
                
                if ~exist('outMat','var')
                    [m, n, ~] = size(currentRes);
                    outMat = uint8(zeros(m,n,nSlices,3));
                end
                outMat(:,:,z,:) = permute(currentRes,[1,2,4,3]);
            end
            close all;
            if ~saveAsVid
                IO.saveAsTiff(tiffName,outMat);
            else
                 IO.saveAsVid(tiffName,outMat);
            end
            
        end
        
        function saveVariabilityAsTiff(im,seg,prior,varMask,tiffName)
            if exist(tiffName,'file')
                delete(tiffName);
            end
            
            firstSlice = find(sum(sum(seg,1),2) > 0,1,'first');
            nSlices = find(sum(sum(seg,1),2) > 0,1,'last') - firstSlice + 1;
            if exist('varMask', 'var') && ~isempty(varMask)
                lineStrctCell = LineStruct.getLineStructCellFromVarMask(im, seg, varMask);
            elseif ~isempty(prior)
                lineStrctCell = LineDisplay.calcLineStrctCellVariability(im,seg,prior,varMask);
            else
                lineStrctCell = LineStruct.getLineStructCell(seg,[0,0,1]);
            end
            %
            f = figure('units','normalized','outerposition',[0 0 1 1]);
            
            ax = axes('Units','pixels');
            set(ax, 'units', 'normalized', 'position', [0.05 0.15 0.9 0.8])
            for z = 1:nSlices
                %[z, nSlices]
                
                LineDisplay.showZSliceData(im, lineStrctCell,z + firstSlice - 1,[min(im(:)),max(im(:))],varMask);
                currentRes = getframe;
                
                if ~exist('outMat','var')
                    [m, n, ~] = size(currentRes.cdata);
                    outMat = uint8(zeros(m,n,nSlices,3));
                end
                outMat(:,:,z,:) = permute(currentRes.cdata,[1,2,4,3]);
            end
            close all;
            IO.saveAsTiff(tiffName,outMat);
        end
        
        function ui(im,lineStructCell,mask)
            global g_im;
            global g_lineStrctCell;
            global g_mask;
            
            f = figure('Visible','off','units','normalized','outerposition',[0 0 1 1]);
            ax = axes('Units','pixels');
            set(ax, 'units', 'normalized', 'position', [0.05 0.15 0.9 0.8])
            g_im = im;
            
            if exist('mask','var')
                g_mask = mask;
            else
                g_mask = zeros(size(g_im));
            end
            
            % Create a figure and axes
            
            
            
            if exist('lineStructCell','var')
                g_lineStrctCell = lineStructCell;
            else
                g_lineStrctCell = [];
            end
            
            % Create pop-up menu
            %popup = uicontrol('Style', 'popup',...
            %       'String', {'parula','jet','hsv','hot','cool','gray'},...
            %       'Position', [20 340 100 50],...
            %       'Callback', @setmap);
            
            % Create push button
            %btn = uicontrol('Style', 'pushbutton', 'String', 'Clear',...
            %    'Position', [20 20 50 20],...
            %    'Callback', 'cla');
            
            % Create slider
            z = round(size(g_im,3)/2);
            sld = uicontrol('Style', 'slider',...
                'Min',1,'Max',size(g_im,3),'Value',z,...
                'Position', [500 50 120 20],...
                'Callback', @updateSliceCallback);
            
            % Add a text uicontrol to label the slider.
            txt = uicontrol('Style','text',...
                'Position',[500 75 120 20],...
                'String','Vertical Exaggeration');
            
            sldContrastMin = uicontrol('Style', 'slider',...
                'Min',min(g_im(:)),'Max',max(g_im(:)),'Value',min(g_im(:)),...
                'Position', [700 55 120 20],...
                'Callback', @updateContrastCallback);
            
            sldContrastMax = uicontrol('Style', 'slider',...
                'Min',min(g_im(:)),'Max',max(g_im(:)),'Value',max(g_im(:)),...
                'Position', [700 30 120 20],...
                'Callback', @updateContrastCallback);
            
            
            uicontrol('Style', 'pushbutton', 'String', 'contrast',...
                'Position', [900 55 120 20],...
                'Callback', @optContrastCallback);
            
            nxtChunkBtn = uicontrol('Style', 'pushbutton', 'String', 'moveChunk',...
                'Position', [900 30 120 20],...
                'Callback', @goToNextSegChunkCallback);
            
            set(gcf,'ResizeFcn', @figureResized)
            
            if size(g_im,3)==1
                set(sld, 'Enable', 'off');
                set(nxtChunkBtn,'Enable','off');
            end
            
            
            txtContrast = uicontrol('Style','text',...
                'Position',[700 80 120 20],...
                'String',getContrastTxt());
            
            
            sldAlpha = uicontrol('Style', 'slider',...
                'Min',0,'Max',0.8,'Value',0.4,...
                'Position', [1100 30 120 20],...
                'Callback', @updateAlphaCallback);
            
            alphaTxt = uicontrol('Style','text',...
                'Position',[1100 80 120 20],...
                'String',getAlphaText());
            
            % Make figure visble after adding all components
            f.Visible = 'on';
            % This code uses dot notation to set properties.
            % Dot notation runs in R2014b and later.
            % For R2014a and earlier: set(f,'Visible','on');
            
            g_alpha = sldAlpha.get('Value');
            g_minVal = round(sldContrastMin.get('Value'));
            g_maxVal = round(sldContrastMax.get('Value'));
            %LineDisplay.showZSliceData(g_im, g_lineStrctCell,z,[g_minVal,g_maxVal],g_mask);
            showZSliceDataInner(true)
            txt.set('String',getTxt(size(g_im,3),z));
            %  function setmap(source,event)
            %      val = source.Value;
            %      maps = source.String;
            %      % For R2014a and earlier:
            %      % val = get(source,'Value');
            %      % maps = get(source,'String');
            
            %      newmap = maps{val};
            %      colormap(newmap);
            %  end
            
            function optContrastCallback(source,event)
                [~,range,~] = Utils.optimizeImContrast(g_im);
                sldContrastMin.set('Value',range(1))
                sldContrastMax.set('Value',range(2))
                updateContrastCallback(source,event);
            end
            
            function updateSliceCallback(source,event)
                z = round(sld.get('Value'));
                sld.set('Value',z);
                g_minVal = round(sldContrastMin.get('Value'));
                g_maxVal = round(sldContrastMax.get('Value'));
                txt.set('String',getTxt(size(g_im,3),z));
                %LineDisplay.showZSliceData(g_im, g_lineStrctCell,z,[g_minVal,g_maxVal],g_mask,g_alpha);
                showZSliceDataInner(true)
                
            end
            
            function updateAlphaCallback(source,event)
                g_alpha = sldAlpha.get('Value');
                alphaTxt.set('String',getAlphaText());
                showZSliceDataInner()
                %LineDisplay.showZSliceData(g_im, g_lineStrctCell,z, [g_minVal,g_maxVal],g_mask,g_alpha);
            end
            
            function updateContrastCallback(source,event)
                
                g_minVal = round(sldContrastMin.get('Value'));
                g_maxVal = round(sldContrastMax.get('Value'));
                g_minVal = min(g_minVal,g_maxVal);
                g_maxVal = max(g_minVal,g_maxVal);
                sldContrastMin.set('Value',g_minVal);
                sldContrastMax.set('Value',g_maxVal);
                txtContrast.set('String',getContrastTxt());
                %LineDisplay.showZSliceData(g_im, g_lineStrctCell,z, [g_minVal,g_maxVal],g_mask,g_alpha);
                showZSliceDataInner
            end
            
            function str = getTxt(totalZ,z)
                str = [num2str(z) '/' num2str(totalZ)];
            end
            
            function [g_minVal,g_maxVal] = getMinMaxContastVals()
                g_minVal = round(sldContrastMin.get('Value'));
                g_maxVal = round(sldContrastMax.get('Value'));
            end
            function str = getContrastTxt()
                
                [g_minVal,g_maxVal] = getMinMaxContastVals();
                str = ['[' num2str(g_minVal) ',' num2str(g_maxVal) ']'];
            end
            
            function str = getAlphaText()
                alphaVal = sldAlpha.get('Value');
                str = ['alpha: ' num2str(alphaVal)];
            end
            
            function goToNextSegChunkCallback(object, eventdata)
                
                %extract line segments
                segMask = ~cellfun(@isempty,g_lineStrctCell);
                lineSegments = bwconncomp(~cellfun(@isempty,g_lineStrctCell));
                z  = sld.get('Value');
                
                %find current segment
                isZExists = @(arr)sum(arr==z)>0;
                if segMask(z)
                    currSeg = find(cellfun(isZExists,lineSegments.PixelIdxList),1,'first');
                    nextSeg = mod(currSeg,length(lineSegments.PixelIdxList))+1;
                    nextSlice = lineSegments.PixelIdxList{nextSeg}(1);
                else
                    nextSlice = z+find(segMask(z+1:end),1,'first');
                    if isempty(nextSlice)
                        nextSlice = find(segMask(1:z-1),1,'first');
                    end
                end
                sld.set('Value',nextSlice);
                updateSliceCallback();
            end
            % -=< Figure resize callback function >=-
            function figureResized(object, eventdata)
                FigPos = get(gcf,'Position');
                S_Pos = [50 45 uint16(FigPos(3)-100)+1 20];
                Stxt_Pos = [50 65 uint16(FigPos(3)-100)+1 15];
                
                %   BtnStPnt = uint16(FigPos(3)-250)+1;
                %   if BtnStPnt < 300
                %       BtnStPnt = 300;
                %   end
                %   Btn_Pos = [BtnStPnt 20 100 20];
                %   ChBx_Pos = [BtnStPnt+110 20 100 20];
                %   if sno > 1
                %       set(shand,'Position', S_Pos);
                %   end
                %   set(stxthand,'Position', Stxt_Pos);
                %   set(ltxthand,'Position', Ltxt_Pos);
                %   set(wtxthand,'Position', Wtxt_Pos);
                %   set(lvalhand,'Position', Lval_Pos);
                %   set(wvalhand,'Position', Wval_Pos);
                %   set(Btnhand,'Position', Btn_Pos);
                %   set(ChBxhand,'Position', ChBx_Pos);
            end
            
            
            
            
            function showZSliceDataInner(resetZoom)
                
                if ~iscell(g_mask)
                    mask = {g_mask};
                elseif length(g_mask)>3
                    error 'you need to support more masks';
                end
                
                
                %ax
                XLim = get(ax, 'XLim');
                YLim = get(ax, 'YLim');
                
                overlay = zeros(size(g_im,1),size(g_im,2),3);
                for c=1:length(mask)
                    currentMask = mask{c}(:,:,z);
                    overlay(:,:,4-c) = currentMask;
                end
                
                if sum(overlay(:))>0
                    imshow(g_im(:,:,z),[g_minVal,g_maxVal]); hold on;
                    hImg = imshow(overlay);
                    alphaMask = (sum(overlay,3)>0)*g_alpha;
                    set(hImg, 'AlphaData', alphaMask);
                else
                    imshow(g_im(:,:,z),[g_minVal,g_maxVal]);
                end
                
                if  ~exist('resetZoom','var') || ~resetZoom
                    set(ax, 'XLim', XLim)
                    set(ax, 'YLim', YLim)
                end
                if ~isempty(g_lineStrctCell) && ~isempty(g_lineStrctCell{z})
                    g_lineStrctCell{z}.plotLines;
                end
            end
        end
        
        
        
        function showZSliceData(im, lineStrctCell,z, rangeLim,mask,alpha)
            
            if ~iscell(mask)
                mask = {mask};
            elseif length(mask)>3
                error 'you need to support more masks';
            end
            
            overlay = zeros(size(im,1),size(im,2),3);
            for c=1:length(mask)
                currentMask = mask{c}(:,:,z);
                overlay(:,:,4-c) = currentMask;
            end
            
            if sum(overlay(:))>0
                imshow(im(:,:,z),rangeLim); hold on;
                
                overlay = zeros(size(currentMask,1),size(currentMask,2),3);
                overlay(:,:,4-c) = currentMask;
                if ~exist('alpha','var')
                    alpha = 0.3;
                end
                hImg = imshow(overlay);
                alphaMask = (sum(overlay,3)>0)*alpha;
                set(hImg, 'AlphaData', alphaMask);
            else
                imshow(im(:,:,z),rangeLim);
            end
            
            if ~isempty(lineStrctCell) && ~isempty(lineStrctCell{z})
                lineStrctCell{z}.plotLines;
            end
            
            
            
        end
        
    end
    
end

